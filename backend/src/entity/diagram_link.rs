//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use serde::{Deserialize, Serialize};
use crate::entity::{prelude::*};
use crate::entity::{diagram, task,table,area,note,reference};
use sea_orm::entity::prelude::*;
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "diagram_link")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub diagram_id: Option<String>,
    pub task_id: Option<String>,
    pub table_id: Option<String>,
    pub area_id: Option<String>,
    pub note_id: Option<String>,
    pub reference_id: Option<String>
}

impl Model {
    pub fn new(id: String, diagram_id: Option<String>, 
        task_id: Option<String>, 
        table_id: Option<String>,
        area_id: Option<String>,
        note_id: Option<String>,
        reference_id: Option<String>) -> Self {
        Self { id, 
            diagram_id: diagram_id, 
            task_id: task_id, 
            table_id: table_id,
            area_id: area_id,
            note_id: note_id,
            reference_id:reference_id
        }
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "Diagram",
        from = "Column::DiagramId",
        to = "diagram::Column::Id"
    )]
    Diagram,
    #[sea_orm(
        belongs_to = "Task",
        from = "Column::TaskId",
        to = "task::Column::Id"
    )]
    Task,
    #[sea_orm(
        belongs_to = "Table",
        from = "Column::TableId",
        to = "table::Column::Id"
    )]
    Table,
    #[sea_orm(
        belongs_to = "Area",
        from = "Column::AreaId",
        to = "area::Column::Id"
    )]
    Area,
    #[sea_orm(
        belongs_to = "Note",
        from = "Column::NoteId",
        to = "note::Column::Id"
    )]
    Note,
    #[sea_orm(
        belongs_to = "Reference",
        from = "Column::ReferenceId",
        to =  "reference::Column::Id"
    )]
    Reference
}

impl Related<Task> for Entity {
    fn to() -> RelationDef {
        Relation::Task.def()
    }
}

impl Related<Diagram> for Entity {
    fn to() -> RelationDef {
        Relation::Diagram.def()
    }
}

impl Related<Table> for Entity {
    fn to() -> RelationDef {
        Relation::Table.def()
    }
}

impl Related<Note> for Entity {
    fn to() -> RelationDef {
        Relation::Note.def()
    }
}

impl Related<Area> for Entity {
    fn to() -> RelationDef {
        Relation::Area.def()
    }
}

impl Related<Reference> for Entity {
    fn to() -> RelationDef {
        Relation::Reference.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}