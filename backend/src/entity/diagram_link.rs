//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use crate::entity::prelude::*;
use crate::entity::{diagram, task};
use sea_orm::entity::prelude::*;
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "diagram_link")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub diagram_id: Option<String>,
    pub task_id: Option<String>,
    pub table_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "Diagram",
        from = "Column::DiagramId",
        to = "diagram::Column::Id"
    )]
    Diagram,
    #[sea_orm(
        belongs_to = "Task",
        from = "Column::TaskId",
        to = "task::Column::Id"
    )]
    Task,
}

impl Related<Task> for Entity {
    fn to() -> RelationDef {
        Relation::Task.def()
    }
}

impl Related<Diagram> for Entity {
    fn to() -> RelationDef {
        Relation::Diagram.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
