//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use crate::entity::{diagram_link, prelude::*};
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "task")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub complete: Option<bool>,
    pub order: Option<i32>,
    pub details: Option<String>,
    pub title: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "DiagramLink")]
    DiagramLink,
}

impl Related<Diagram> for Entity {
    /// diagram_link -> diagram
    fn to() -> RelationDef {
        diagram_link::Relation::Diagram.def()
    }
    /// task -> diagram_link
    fn via() -> Option<RelationDef> {
        Some(diagram_link::Relation::Task.def().rev())
    }
}

impl Related<DiagramLink> for Entity {
    /// diagram_link -> task
    fn to() -> RelationDef {
        Relation::DiagramLink.def()
    }
}
impl ActiveModelBehavior for ActiveModel {}
