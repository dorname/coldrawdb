//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use crate::entity::{prelude::*, table_link, diagram_link};
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq,Serialize,Deserialize)]
#[sea_orm(table_name = "table")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub color: Option<String>,
    pub comment: Option<String>,
    pub locked: Option<bool>,
    pub name: Option<String>,
    #[sea_orm(column_type = "custom(\"NUMERIC\")", nullable)]
    pub x: Option<String>,
    #[sea_orm(column_type = "custom(\"NUMERIC\")", nullable)]
    pub y: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "DiagramLink")]
    DiagramLink,

    #[sea_orm(has_many = "TableLink")]
    TableLink
}

impl Related<DiagramLink> for Entity {
      /// diagram_link -> table
      fn to() -> RelationDef {
        Relation::DiagramLink.def()
    }
}

impl Related<Diagram> for Entity {
    /// diagram_link -> table
    fn to() -> RelationDef {
        Relation::DiagramLink.def()
    }
    /// diagram -> diagram_link
    fn via() -> Option<RelationDef> {
        Some(diagram_link::Relation::Diagram.def().rev())
    }
}


impl Related<TableLink> for Entity {
    // table_link -> table
    fn to() -> RelationDef {
        Relation::TableLink.def()
    }
}

impl Related<Field> for Entity {
    // table_link -> field  
    fn to() -> RelationDef {
        table_link::Relation::Field.def()
    }  

    // table -> table_link
    fn via() -> Option<RelationDef> {
        Some(table_link::Relation::Table.def().rev())
    }

}

impl ActiveModelBehavior for ActiveModel {}
