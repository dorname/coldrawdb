//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::{entity::prelude::*};
use crate::entity::{table,field};
use crate::entity::prelude::*;
use serde::{Deserialize, Serialize};
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq,Serialize, Deserialize)]
#[sea_orm(table_name = "table_link")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub field_id: Option<String>,
    pub table_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "Table",
        from = "Column::TableId",
        to = "table::Column::Id"
    )]
    Table,
    #[sea_orm(
        belongs_to = "Field",
        from = "Column::FieldId",
        to = "field::Column::Id"
    )]
    Field
}

impl Related<Table> for Entity {
    fn to() -> RelationDef {
        Relation::Table.def()
    }
}

impl Related<Field> for Entity {
    fn to() -> RelationDef {
        Relation::Field.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
